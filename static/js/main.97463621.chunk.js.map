{"version":3,"sources":["components/App/app.styles.js","components/App/index.js","serviceWorker.js","index.js","styles/global.js"],"names":["styles","App","textAlign","AppHeader","display","flexDirection","alignItems","justifyContent","minHeight","color","fontFamily","AppBackground","position","top","AppWrapper","styled","particleOptions","particles","number","value","size","interactivity","events","onhover","enable","mode","react_default","a","createElement","react","role","aria-label","particles_default","params","style","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","_body","core_browser_esm","body","margin","padding","WebkitFontSmoothing","MozOsxFontSmoothing","background","Object","defineProperty","h1","fontSize","fontWeight","p","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sLAsBeA,EArBA,CACbC,IAAK,CACHC,UAAW,UAGbC,UAAW,CACTC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,UAAW,QACXC,MAAO,OACPC,WAAY,2BAGdC,cAAe,CACbC,SAAU,WACVC,IAAK,ICVHC,EAAaC,YAAO,MAAPA,CAAcf,EAAOC,KAClCE,EAAYY,YAAO,SAAPA,CAAiBf,EAAOG,WAEpCa,EAAkB,CACtBC,UAAW,CACTC,OAAQ,CACNC,MAAO,IAETC,KAAM,CACJD,MAAO,IAGXE,cAAe,CACbC,OAAQ,CACNC,QAAS,CACPC,QAAQ,EACRC,KAAM,cAqBCxB,EAfH,kBACVyB,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACd,EAAD,KACEY,EAAAC,EAAAC,cAACzB,EAAD,KACEuB,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAME,KAAK,MAAMC,aAAW,QAA5B,mBAMNL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAWM,OAAQjB,EAAiBkB,MAAOlC,EAAOW,yCC7BlCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCDnCC,IAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,gBAAiB,iBAIhCC,IAASC,OACPnB,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cCpBW,eAAAkB,EAAA,OACbpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACE/C,OAAQ,CACNgD,MAAIF,EAAA,CACFG,OAAQ,EACRC,QAAS,EACTxC,WACE,oJACFyC,oBAAqB,cACrBC,oBAAqB,YAErBC,WAAY,WARVC,OAAAC,EAAA,EAAAD,CAAAR,EAAA,aASU,uDATVQ,OAAAC,EAAA,EAAAD,CAAAR,EAAA,aAUU,+CAVVQ,OAAAC,EAAA,EAAAD,CAAAR,EAAA,WAYQ,sBAZRA,GAcJU,GAAI,CACFC,SAAU,MACVC,WAAY,OAEdC,EAAG,CACDV,OAAQ,cDFZ,MACAvB,EAAAC,EAAAC,cAACgC,EAAD,OAEFC,SAASC,eAAe,SDkGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.97463621.chunk.js","sourcesContent":["// @flow\nconst styles = {\n  App: {\n    textAlign: 'center',\n  },\n\n  AppHeader: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    minHeight: '100vh',\n    color: '#222',\n    fontFamily: \"'Open Sans', sans-serif\",\n  },\n\n  AppBackground: {\n    position: 'absolute',\n    top: 0,\n  },\n}\n\nexport default styles\n","// @flow\nimport React, { Fragment } from 'react'\nimport styled from '@emotion/styled'\nimport Particles from 'react-particles-js'\n\n// styles.\nimport styles from './app.styles'\n\nconst AppWrapper = styled('div')(styles.App)\nconst AppHeader = styled('header')(styles.AppHeader)\n\nconst particleOptions = {\n  particles: {\n    number: {\n      value: 50,\n    },\n    size: {\n      value: 3,\n    },\n  },\n  interactivity: {\n    events: {\n      onhover: {\n        enable: true,\n        mode: 'repulse',\n      },\n    },\n  },\n}\n\nconst App = () => (\n  <Fragment>\n    <AppWrapper>\n      <AppHeader>\n        <p>\n          <span role=\"img\" aria-label=\"Nerd\">\n            ðŸ¤“\n          </span>\n        </p>\n      </AppHeader>\n    </AppWrapper>\n    <Particles params={particleOptions} style={styles.AppBackground} />\n  </Fragment>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","// @flow\nimport 'react-app-polyfill/ie9'\nimport React, { Fragment } from 'react'\nimport ReactDOM from 'react-dom'\nimport WebFont from 'webfontloader'\n\n// components.\nimport App from './components/App'\n\n// styles.\nimport Global from './styles/global'\nimport 'sanitize.css'\n\n// utils.\nimport * as serviceWorker from './serviceWorker'\n\nWebFont.load({\n  google: {\n    families: ['Open Sans:400', 'sans-serif'],\n  },\n})\n\nReactDOM.render(\n  <Fragment>\n    <Global />\n    <App />\n  </Fragment>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// @flow\nimport React from 'react'\nimport { Global } from '@emotion/core'\n\nexport default () => (\n  <Global\n    styles={{\n      body: {\n        margin: 0,\n        padding: 0,\n        fontFamily:\n          \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\n        WebkitFontSmoothing: 'antialiased',\n        MozOsxFontSmoothing: 'grayscale',\n        /* eslint-disable no-dupe-keys */\n        background: '#16222A',\n        background: '-webkit-linear-gradient(to right, #3A6073, #16222A)',\n        background: 'linear-gradient(to right, #3A6073, #16222A)',\n        /* eslint-enable no-dupe-keys */\n        fontSize: 'calc(16px + 2vmin)',\n      },\n      h1: {\n        fontSize: '1em',\n        fontWeight: '400',\n      },\n      p: {\n        margin: '.4em 0',\n      },\n    }}\n  />\n)\n"],"sourceRoot":""}